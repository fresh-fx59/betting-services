version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: betting-postgres
    environment:
      POSTGRES_DB: betting_db
      POSTGRES_USER: betting_user
      POSTGRES_PASSWORD: betting_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - betting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U betting_user -d betting_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka in KRaft mode (without Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: betting-kafka
    user: root
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9093,CONTROLLER://kafka:9094,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9094'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - betting-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # Create jackpot-bets topic
      kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic jackpot-bets --partitions 3 --replication-factor 1
      
      # List all topics
      echo 'Topic created successfully:'
      kafka-topics --bootstrap-server kafka:9093 --list
      "
    networks:
      - betting-network
    restart: "no"

  # Spring Boot Application
  betting-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CACHEBUST: ${CACHEBUST:-1}
    container_name: betting-app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/betting_db
      SPRING_DATASOURCE_USERNAME: betting_user
      SPRING_DATASOURCE_PASSWORD: betting_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SERVER_PORT: 8081
    networks:
      - betting-network
    restart: unless-stopped

  # Kafka UI (optional but useful for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: betting-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: betting-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - betting-network

networks:
  betting-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local